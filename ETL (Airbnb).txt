import pandas as pd
import psycopg2
from sqlalchemy import create_engine
import pandas as pd
from pandasql import sqldf

#Import data from csv into dataframe
def read_csv_from_url(url):
    try:
        df = pd.read_csv(url)
        return df
    except Exception as e:
        print("Error:", e)
        return None


#reading from full review list from url link
url_review = 'http://data.insideairbnb.com/singapore/sg/singapore/2023-12-26/data/reviews.csv.gz'
url_full_listing  ='http://data.insideairbnb.com/singapore/sg/singapore/2023-12-26/data/listings.csv.gz'

# convert csv file into dataframe 
df_review = read_csv_from_url(url_review)
df_full_listing =read_csv_from_url(url_full_listing)

#remove [] from host_verifications column
df_full_listing['host_verifications'] = df_full_listing['host_verifications'].str.strip('[]')
#replace ' with a blank space
df_full_listing['host_verifications'] = df_full_listing['host_verifications'].str.replace("'", "")

# replace all empty cells with N/A
df_full_listing.where(pd.notnull(df_full_listing), 'N/A')

conn =None
cur=None



try:
    conn = psycopg2.connect(
    dbname='databasename',
    user='postgres',
    password='password',
    host='ipaddress',
    port='5432',
    sslmode= 'require',
    sslrootcert= '',
    sslkey='',
    sslcert= '')
    cur=conn.cursor()

 #----------------------------------------------------------------------------------------------------------------------------------------
    #create table customer comments
    create_script_review ='''CREATE TABLE IF NOT EXISTS customer_comments (
        listing_id_fk bigint,
        comment_id_pk bigint primary key,
        date date,
        reviewer_id bigint,
        reviewer_name varchar(300),
        comments text)'''
    cur.execute(create_script_review)
    conn.commit()


    for index, row in df_review .iterrows():
        
        insert_script_host = '''INSERT INTO customer_comments  (
        listing_id_fk ,
        comment_id_pk ,
        date ,
        reviewer_id ,
        reviewer_name,
        comments ) VALUES (%s,%s,%s,%s,%s,%s)'''
        values =(row['listing_id'],row['id'],row['date'],row['reviewer_id'],row['reviewer_name'],row['comments'])
        cur.execute(insert_script_host,values)
        conn.commit()
 #----------------------------------------------------------------------------------------------------------------------------------------
   #create  host master table
    create_script_host =''' CREATE TABLE  IF NOT EXISTS host_master (
        host_id_pk text primary key,
        host_url text, 
        host_name text,
        host_since text,
        host_location text,
        host_about text,
        host_response_time text,
        host_response_rate text,
        host_acceptance_rate text,
        host_is_superhost text,
        host_thumbnail_url text,
        host_picture_url text,
        host_listings_count text,
        host_total_listings_count text,
        host_verifications text,
        host_has_profile_pic text,
        host_identity_verified text,
        calculated_host_listings_count text,
        calculated_host_listings_count_entire_homes text,
        calculated_host_listings_count_private_rooms text,
        calculated_host_listings_count_shared_rooms text)'''

    cur.execute(create_script_host)
    
    for index, row in df_full_listing.iterrows():
        
         insert_script_host = '''INSERT INTO host_master  (
        host_id_pk ,
        host_url , 
        host_name ,
        host_since ,
        host_location ,
        host_about ,
        host_response_time ,
        host_response_rate ,
        host_acceptance_rate ,
        host_is_superhost ,
        host_thumbnail_url ,
        host_picture_url ,
        host_listings_count ,
        host_total_listings_count ,
        host_verifications ,
        host_has_profile_pic ,
        host_identity_verified ,
        calculated_host_listings_count ,
        calculated_host_listings_count_entire_homes ,
        calculated_host_listings_count_private_rooms ,
        calculated_host_listings_count_shared_rooms)
         VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) '''
         values = (row['id'],row['host_url'],row['host_name'],
                   row['host_since'] ,row['host_location'] ,
                   row['host_about'] ,row['host_response_time'] ,
                   row['host_response_rate'] ,row ['host_acceptance_rate'],
                   row['host_is_superhost'] ,row ['host_thumbnail_url'] ,row['host_picture_url'] ,
                   row['host_listings_count'] ,row['host_total_listings_count'] ,row['host_verifications'] ,
                   row['host_has_profile_pic'] ,row['host_identity_verified'] , row['calculated_host_listings_count'] ,
                   row['calculated_host_listings_count_entire_homes'] , row['calculated_host_listings_count_private_rooms'] ,
                   row['calculated_host_listings_count_shared_rooms'])
         cur.execute(insert_script_host,values)
         conn.commit()

         
# #----------------------------------------------------------------------------------------------------------------------------------------

# listing master        

    create_script_listingmaster ='''CREATE TABLE IF NOT EXISTS listing_master(
        listing_id_pk TEXT PRIMARY KEY,
        host_id_fk text,
        listing_url text,
        last_scraped text,
        amenities_description text,
        listing_description text,
        picture_url text,
        host_neigbourhood text,
        region text,
        latitude text,
        longtitude text,
        property_type text,
        room_type text,
        guests_capacity text,
             bathrooms_text text,
         num_beds text,
         price text,
         minimum_nights text,
        maximum_nights text,
        minimum_minimum_nights text,
        maximum_minimum_nights text,
        minimum_maximum_nights text,
        maximum_maximum_nights text,
        minimum_nights_avg_ntm text,
        maximum_nights_avg_ntm text,
        has_availability text,
        availability_30 text,
        availability_60 text,
        availability_90 text,
        availability_365 text,
        calendar_last_scraped text)'''

    cur.execute(create_script_review)
    conn.commit()

    for index, row in df_full_listing.iterrows():
        
         insert_script_host = '''INSERT INTO listing_master (
        listing_id_pk,
        host_id_fk,
        listing_url,
        last_scraped,
        amenities_description,
        listing_description,
        picture_url,
         host_neigbourhood,
        region,
        latitude,
        longtitude,
        property_type,
        room_type,
        guests_capacity,
        bathrooms_text,
        num_beds,
        price,
        minimum_nights,
        maximum_nights,
        minimum_minimum_nights,
        maximum_minimum_nights,
        minimum_maximum_nights,
        maximum_maximum_nights,
        minimum_nights_avg_ntm,
        maximum_nights_avg_ntm,
        has_availability,
        availability_30,
        availability_60,
        availability_90,
        availability_365,
        calendar_last_scraped) 
        VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) '''
         values =(row['id'],row['host_id'],row['listing_url'],row['last_scraped'],row['name'],row['neighborhood_overview'],row['picture_url']
                  ,row['neighbourhood_cleansed'],row['neighbourhood_group_cleansed'],row['latitude'],row['longitude'],row['property_type'],row['room_type'],row['accommodates']
                  ,row['bathrooms_text'],row['beds'],row['price'],row['minimum_nights'],row['maximum_nights'],row['minimum_minimum_nights'],
                  row['maximum_minimum_nights']
                  ,row['minimum_maximum_nights'],row['maximum_maximum_nights'],row['minimum_nights_avg_ntm'],
                  row['maximum_nights_avg_ntm'],row['has_availability'],row['availability_30'],row['availability_60']
                  ,row['availability_90'],row['availability_365'],row['calendar_last_scraped'])
         cur.execute(insert_script_host,values)

         conn.commit() 
#----------------------------------------------------------------------------------------------------------------------------------------

#Listing_review_summary

    create_script_review_summary ='''CREATE TABLE IF NOT EXISTS Listing_review_summary (
        listing_id text,
        host_id text,
        number_of_reviews text,
        number_of_reviews_ltm text,
        number_of_reviews_l30d text,
        first_review text,
        last_review text,
        review_scores_rating text,
         review_scores_accuracy text,
         review_scores_cleanliness text,
        review_scores_checkin text,
        review_scores_communication text,
        review_scores_location text,
        review_scores_value text,
        reviews_per_month text,
        instant_bookable text)'''


    cur.execute(create_script_review)
    conn.commit()

    for index, row in df_full_listing.iterrows():
        
        insert_script_host = '''INSERT INTO Listing_review_summary  (
        listing_id,
        host_id,
        number_of_reviews,
        number_of_reviews_ltm,
        number_of_reviews_l30d,
        first_review ,
        last_review ,
        review_scores_rating ,
        review_scores_accuracy ,
        review_scores_cleanliness ,
        review_scores_checkin ,
        review_scores_communication ,
        review_scores_location ,
        review_scores_value,
        reviews_per_month,
        instant_bookable  ) 
        VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) '''
        values =(row['id'],row['host_id'],row['number_of_reviews'], row['number_of_reviews_ltm'], row['number_of_reviews_l30d'], row['first_review'],
                 row['last_review'], row['review_scores_rating'], row['review_scores_accuracy'], row['review_scores_cleanliness'], row['review_scores_checkin'],
                 row['review_scores_communication'], row['review_scores_location'], row['review_scores_value'], row['reviews_per_month'],
                 row['instant_bookable'])
        
        cur.execute(insert_script_host,values)

        conn.commit()

except Exception as error:      
     print(error)


finally:
    if cur is not None:

          cur.close()
    if conn is not None:

         conn.close()